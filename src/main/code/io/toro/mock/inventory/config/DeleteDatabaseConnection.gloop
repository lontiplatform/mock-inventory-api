{
    "steps": [
        {
            "type": "block",
            "blockType": "TRY_CATCH",
            "children": [
                {
                    "type": "fork",
                    "comments": "isDebug property set to true?",
                    "expression": "'debug.enabled'.getPackageProperty()",
                    "children": [
                        {
                            "type": "block",
                            "label": "true",
                            "comments": "If true, drop all the created tables, and the inserted sample database records",
                            "children": [
                                {
                                    "type": "invokeCode",
                                    "comments": "DROP TABLE query start",
                                    "className": "io.toro.martini.LoggerMethods",
                                    "methodName": "info",
                                    "parameters": [
                                        "java.lang.String"
                                    ],
                                    "inputs": [
                                        {
                                            "type": "set",
                                            "expression": "Dropping all tables in mock-inventory-api",
                                            "to": [
                                                "message"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "invokeCode",
                                    "comments": "Executes a DROP TABLE query to remove the created table in the database. This also clears all the records prior this service execution",
                                    "className": "io.toro.martini.SqlMethods",
                                    "methodName": "sql",
                                    "parameters": [
                                        "java.lang.String",
                                        "groovy.lang.Closure"
                                    ],
                                    "inputs": [
                                        {
                                            "type": "set",
                                            "expression": "{\tsql ->\n\tsql.execute ( '''\n\t\t\tDROP TABLE \"ITEMS\" \n\t\t''' )\n}",
                                            "evaluate": true,
                                            "to": [
                                                "c"
                                            ]
                                        },
                                        {
                                            "type": "set",
                                            "expression": "mock_inventory_api",
                                            "to": [
                                                "poolName"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "invokeCode",
                                    "comments": "Stops the database connection pool mock_inventory_api",
                                    "className": "io.toro.martini.DatabaseConnectionPoolMethods",
                                    "methodName": "stopPool",
                                    "parameters": [
                                        "java.lang.String"
                                    ],
                                    "inputs": [
                                        {
                                            "type": "set",
                                            "expression": "mock_inventory_api",
                                            "to": [
                                                "name"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "invokeCode",
                                    "comments": "Deletes the database connection pool mock_inventory_api",
                                    "className": "io.toro.martini.DatabaseConnectionPoolMethods",
                                    "methodName": "deletePool",
                                    "parameters": [
                                        "java.lang.String"
                                    ],
                                    "inputs": [
                                        {
                                            "type": "set",
                                            "expression": "mock_inventory_api",
                                            "to": [
                                                "name"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "gloovy",
                    "comments": "unset the J2EE13Compliance property if database type currently in use is oracle",
                    "gloovyScript": "if ( 'database.type'.getPackageProperty().equalsIgnoreCase( 'oracle' ) )\n\tSystem.clearProperty( 'oracle.jdbc.J2EE13Compliant' )"
                }
            ],
            "catch": [
                {
                    "type": "invokeCode",
                    "comments": "Logs the exception caught in the console",
                    "className": "io.toro.martini.LoggerMethods",
                    "methodName": "error",
                    "parameters": [
                        "java.lang.String",
                        "java.lang.Throwable"
                    ],
                    "inputs": [
                        {
                            "from": [
                                "$gloopException",
                                "realException"
                            ],
                            "to": [
                                "throwable"
                            ]
                        },
                        {
                            "from": [
                                "$gloopException",
                                "gloopStackTrace"
                            ],
                            "to": [
                                "message"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}